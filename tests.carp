(load-and-use Test)

(load "./subprocess.carp")

(Debug.sanitize-addresses)

(defn test-args []
  [@"sh" @"-c" @"echo 'this is stderr' 1>&2; echo 'this is stdout'; exit 42"])

(def pipe-all (Subprocess.cmd (SubprocessOptions.spp) &(test-args)))

(def print-all (Subprocess.cmd (SubprocessOptions.sss) &(test-args)))

(def fold-err-into-out (Subprocess.cmd (SubprocessOptions.spo) &(test-args)))

(def fold-err-into-out-large
     (Subprocess.cmd (SubprocessOptions.spo)
                     &[@"printf" (String.repeat 10000 "wow")]))

(def finishes-with-open-pipe
     (Subprocess.cmd (SubprocessOptions.pss) &[@"echo" @"finishes with open pipe"]))

(deftest test
  (assert-equal test
                &(Just @"this is stdout\n")
                (SubprocessRes.out &pipe-all)
                "pipe - out works with small output")
  (assert-equal test
                &(Just @"this is stderr\n")
                (SubprocessRes.err &pipe-all)
                "pipe - err works with small output")
  (assert-equal test
                &42
                (SubprocessRes.exit-code &pipe-all)
                "pipe - exit-code works with small output")

  (assert-equal test
                &(Nothing)
                (SubprocessRes.out &print-all)
                "print - out works with small output")
  (assert-equal test
                &(Nothing)
                (SubprocessRes.err &print-all)
                "print - err works with small output")
  (assert-equal test
                &42
                (SubprocessRes.exit-code &print-all)
                "print - exit-code works with small output")

  (assert-equal test
                &(Just @"this is stderr\nthis is stdout\n")
                (SubprocessRes.out &fold-err-into-out)
                "combine - out works with small output")
  (assert-equal test
                &(Nothing)
                (SubprocessRes.err &fold-err-into-out)
                "combine - err works with small output")
  (assert-equal test
                &42
                (SubprocessRes.exit-code &fold-err-into-out)
                "combine - exit-code works with small output")

  (assert-true test
                (= &(Just (String.repeat 10000 "wow"))
                   (SubprocessRes.out &fold-err-into-out-large))
                "combine - out works with large output")
  (assert-equal test
                &(Nothing)
                (SubprocessRes.err &fold-err-into-out-large)
                "combine - err works with large output")
  (assert-equal test
                &0
                (SubprocessRes.exit-code &fold-err-into-out-large)
                "combine - exit-code works with large output")

  (assert-equal test
                &0
                (SubprocessRes.exit-code &finishes-with-open-pipe)
                "finishes with open pipe")

  (assert-equal test
                &0
                (SubprocessRes.exit-code &(Subprocess.cmd (SubprocessOptions.sss) &[]))
                "succeeds when no commands passed")

  (assert-equal test
                &(SubprocessRes (Just @"wow") (Nothing) 0)
                &(let [echo (Subprocess.call (SubprocessOptions.sps) &[@"printf" @"wow"])
                       out-pipe (Maybe.unsafe-from @(Subprocess.out &echo))]
                  (Subprocess.cmd (SubprocessOptions.ips out-pipe) &[@"cat"]))
                "can pipe in and pipe out on small input/output")

  (assert-equal test
                &(SubprocessRes (Just @"wow") (Nothing) 0)
                &(let [echo (Subprocess.call (SubprocessOptions.sps) &[@"printf" @"wow"])
                       out-pipe (Maybe.unsafe-from @(Subprocess.out &echo))]
                  (Subprocess.cmd (SubprocessOptions.ips out-pipe) &[@"cat"]))
                "can pipe in and pipe out on small input/output")

  (assert-equal test
                &(SubprocessRes (Just @"you<are>surrounded\n") (Nothing) 0)
                &(Subprocess.collect
                  (Subprocess.pipe &[[@"echo" @"are"]
                                     [@"awk" @"{print \"you>\" $0 \"<surrounded\"}"]
                                     [@"tr" @"<>" @"><"]]))
                "Subprocess.pipe can pipe commands together"))

