(load-and-use Test)

(load "./subprocess.carp")

(Debug.sanitize-addresses)

(defn test-args []
  [@"sh" @"-c" @"echo 'this is stderr' 1>&2; echo 'this is stdout'; exit 42"])

(def pipe-all (Subprocess.cmd (SubprocessOptions.spp) &(test-args)))

(def print-all (Subprocess.cmd (SubprocessOptions.sss) &(test-args)))

(def fold-err-into-out (Subprocess.cmd (SubprocessOptions.spo) &(test-args)))

(def fold-err-into-out-large
     (Subprocess.cmd (SubprocessOptions.spo)
                     &[@"printf" (String.repeat 10000 "wow")]))

(deftest test
  (assert-equal test
                &(Just @"this is stdout\n")
                (SubprocessRes.out &pipe-all)
                "pipe - out works with small output")
  (assert-equal test
                &(Just @"this is stderr\n")
                (SubprocessRes.err &pipe-all)
                "pipe - err works with small output")
  (assert-equal test
                &42
                (SubprocessRes.exit-code &pipe-all)
                "pipe - exit-code works with small output")

  (assert-equal test
                &(Nothing)
                (SubprocessRes.out &print-all)
                "print - out works with small output")
  (assert-equal test
                &(Nothing)
                (SubprocessRes.err &print-all)
                "print - err works with small output")
  (assert-equal test
                &42
                (SubprocessRes.exit-code &print-all)
                "print - exit-code works with small output")

  (assert-equal test
                &(Just @"this is stderr\nthis is stdout\n")
                (SubprocessRes.out &fold-err-into-out)
                "combine - out works with small output")
  (assert-equal test
                &(Nothing)
                (SubprocessRes.err &fold-err-into-out)
                "combine - err works with small output")
  (assert-equal test
                &42
                (SubprocessRes.exit-code &fold-err-into-out)
                "combine - exit-code works with small output")

  (assert-equal test
                &(Just (String.repeat 10000 "wow"))
                (SubprocessRes.out &fold-err-into-out-large)
                "combine - out works with large output")
  (assert-equal test
                &(Nothing)
                (SubprocessRes.err &fold-err-into-out-large)
                "combine - err works with large output")
  (assert-equal test
                &0
                (SubprocessRes.exit-code &fold-err-into-out-large)
                "combine - exit-code works with large output")

  (assert-equal test
                &0
                (SubprocessRes.exit-code &(Subprocess.cmd (SubprocessOptions.pss) &[@"echo" @"ok"]))
                "finishes with open pipe"))

  ; (assert-equal test
  ;               ; &(SubprocessRes (Just @"wow\n") (Nothing) 0)
  ;               &(SubprocessRes (Nothing) (Nothing) 0)
  ;               &(let [echo (Subprocess.call (SubprocessOptions.sps) &[@"echo" @"wow"])
  ;                      out-pipe (Maybe.unsafe-from @(Subprocess.out &echo))]
  ;                 (Subprocess.cmd (SubprocessOptions (SubprocessInMode.PipeIn out-pipe) (SubprocessOutMode.Pipe) (SubprocessErrMode.Std)) &[@"cat"]))
  ;               "finishes with open pipe"))
